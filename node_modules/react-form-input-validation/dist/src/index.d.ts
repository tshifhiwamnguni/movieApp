/// <reference types="react" />
import * as Validator from "validatorjs";
import { IReactComponent, IOptions, ReactFormSubmitEventHandler, ReactFormInputValidation as BaseValidation, Lang } from "./specs/react-form-input-validator.spec";
import { useFormInputValidation } from "./hooks/useFormInputValidation";
declare class ReactFormInputValidation extends BaseValidation {
    private component;
    private rules;
    private errors;
    private _onformsubmit;
    constructor(component: IReactComponent, options?: IOptions);
    static useLang(locale: string): void;
    static register(name: string, callbackFn: Validator.RegisterCallback, errorMessage: string): void;
    static registerAsync(name: string, callbackFn: Validator.RegisterAsyncCallback, errorMessage: string): void;
    static setMessages(langCode: Lang, values: Validator.ErrorMessages): void;
    static getMessages(langCode: Lang): object;
    static getDefaultLang(): string;
    static setAttributeFormatter(callbackFn: Validator.AttributeFormatter): void;
    set onformsubmit(callback: ReactFormSubmitEventHandler);
    get onformsubmit(): ReactFormSubmitEventHandler;
    addEventListener(event: string, callback: (...args: Array<any>) => void): this;
    removeEventListener(event: string, callback: (...args: Array<any>) => void): this;
    useRules(rules: any): void;
    handleChangeEvent(event: React.ChangeEvent<HTMLInputElement>): void;
    handleBlurEvent(event: React.FocusEvent<HTMLInputElement>): void;
    handleSubmit(event: React.FormEvent): void;
    private validateForm;
    private validate;
    private invalidateErrors;
    private getEvent;
}
export { Lang, useFormInputValidation };
export default ReactFormInputValidation;
//# sourceMappingURL=index.d.ts.map