import React from "react";
import { Lang } from "../specs/react-form-input-validator.spec";
import * as Validator from "validatorjs";
export interface FieldsObject {
    [key: string]: string | number | boolean | Array<any> | object | any;
}
export interface ErrorsObject {
    [key: string]: string;
}
export interface RulesObject {
    [key: string]: string;
}
export interface FormInstance {
    isValidForm: boolean;
    useRules(rules: any): void;
    useLang(locale: string): void;
    register(name: string, callbackFn: Validator.RegisterCallback, errorMessage: string): void;
    registerAsync(name: string, callbackFn: Validator.RegisterAsyncCallback, errorMessage: string): void;
    setMessages(langCode: Lang, values: object): void;
    getMessages(langCode: Lang): object;
    getDefaultLang(): string;
    setAttributeFormatter(callbackFn: Function): void;
    handleChangeEvent(event: React.ChangeEvent<HTMLInputElement>): void;
    handleBlurEvent(event: React.FocusEvent<HTMLInputElement>): void;
    handleSubmit(event: React.FormEvent): void;
    validate(event: React.FormEvent): Promise<boolean>;
}
export declare function useFormInputValidation(fieldsObject?: FieldsObject, rulesObject?: RulesObject): Array<FieldsObject | ErrorsObject | FormInstance>;
//# sourceMappingURL=useFormInputValidation.d.ts.map